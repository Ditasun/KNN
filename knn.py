# -*- coding: utf-8 -*-
"""knn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wpWLSGCEcUNYdT6Xfu0JFvscUhMCjQaU
"""

import csv
import random
import math
import operator
import numpy as np
import matplotlib.pyplot as plt


def load_dataset(filename, split):
    learn_data = []
    test_data = []
    with open(filename, 'r') as file:
        lines = csv.reader(file)
        dataset = list(lines)
        for x in range(len(dataset) - 1):
            for y in range(4):
                dataset[x][y] = float(dataset[x][y])
            if random.random() < split:
                learn_data.append(dataset[x])
            else:
                test_data.append(dataset[x])

    return learn_data, test_data

#Calculatin Euclid distance
def euclid(num1, num2, length):
    distance = 0
    for x in range(length):
        distance += np.power((num1[x] - num2[x]),2)
    return math.sqrt(distance)

#calculating k-nearest-neighbors
def get_neighbors(learn_data, test_instance, k):
    distances = []
    length = len(test_instance) - 1
    for x in range(len(learn_data)):
            dist = euclid(test_instance, learn_data[x], length)
            distances.append((learn_data[x], dist))
    distances.sort(key=operator.itemgetter(1))
    neighbors = []
    for x in range(k):
        neighbors.append(distances[x][0])
    return neighbors

def get_response(neighbors):
    class_votes = {}
    for x in range(len(neighbors)):
        response = neighbors[x][-1]
        if response in class_votes:
            class_votes[response] += 1
        else:
            class_votes[response] = 1
    sorted_votes = sorted(class_votes.items(), key=operator.itemgetter(1), reverse=True)
    return sorted_votes[0][0]

#finding accuracy
def get_accuracy(test_data, predict):
    correct = 0
    for x in range(len(test_data)):
        if test_data[x][-1] == predict[x]:
            correct += 1
    return (correct / float(len(test_data))) * 100.0

iris = ["5.1,3.5,1.4,0.2,Iris-setosa",
"4.9,3.0,1.4,0.2,Iris-setosa",
"4.7,3.2,1.3,0.2,Iris-setosa",
"4.6,3.1,1.5,0.2,Iris-setosa",
"5.0,3.6,1.4,0.2,Iris-setosa",
"5.4,3.9,1.7,0.4,Iris-setosa",
"4.6,3.4,1.4,0.3,Iris-setosa",
"5.0,3.4,1.5,0.2,Iris-setosa",
"4.4,2.9,1.4,0.2,Iris-setosa",
"4.9,3.1,1.5,0.1,Iris-setosa",
"5.4,3.7,1.5,0.2,Iris-setosa",
"4.8,3.4,1.6,0.2,Iris-setosa",
"4.8,3.0,1.4,0.1,Iris-setosa",
"4.3,3.0,1.1,0.1,Iris-setosa",
"5.8,4.0,1.2,0.2,Iris-setosa",
"5.7,4.4,1.5,0.4,Iris-setosa",
"5.4,3.9,1.3,0.4,Iris-setosa",
"5.1,3.5,1.4,0.3,Iris-setosa",
"5.7,3.8,1.7,0.3,Iris-setosa",
"5.1,3.8,1.5,0.3,Iris-setosa",
"5.4,3.4,1.7,0.2,Iris-setosa",
"5.1,3.7,1.5,0.4,Iris-setosa",
"4.6,3.6,1.0,0.2,Iris-setosa",
"5.1,3.3,1.7,0.5,Iris-setosa",
"4.8,3.4,1.9,0.2,Iris-setosa",
"5.0,3.0,1.6,0.2,Iris-setosa",
"5.0,3.4,1.6,0.4,Iris-setosa",
"5.2,3.5,1.5,0.2,Iris-setosa",
"5.2,3.4,1.4,0.2,Iris-setosa",
"4.7,3.2,1.6,0.2,Iris-setosa",
"4.8,3.1,1.6,0.2,Iris-setosa",
"5.4,3.4,1.5,0.4,Iris-setosa",
"5.2,4.1,1.5,0.1,Iris-setosa",
"5.5,4.2,1.4,0.2,Iris-setosa",
"4.9,3.1,1.5,0.1,Iris-setosa",
"5.0,3.2,1.2,0.2,Iris-setosa",
"5.5,3.5,1.3,0.2,Iris-setosa",
"4.9,3.1,1.5,0.1,Iris-setosa",
"4.4,3.0,1.3,0.2,Iris-setosa",
"5.1,3.4,1.5,0.2,Iris-setosa",
"5.0,3.5,1.3,0.3,Iris-setosa",
"4.5,2.3,1.3,0.3,Iris-setosa",
"4.4,3.2,1.3,0.2,Iris-setosa",
"5.0,3.5,1.6,0.6,Iris-setosa",
"5.1,3.8,1.9,0.4,Iris-setosa",
"4.8,3.0,1.4,0.3,Iris-setosa",
"5.1,3.8,1.6,0.2,Iris-setosa",
"4.6,3.2,1.4,0.2,Iris-setosa",
"5.3,3.7,1.5,0.2,Iris-setosa",
"5.0,3.3,1.4,0.2,Iris-setosa",
"7.0,3.2,4.7,1.4,Iris-versicolor",
"6.4,3.2,4.5,1.5,Iris-versicolor",
"6.9,3.1,4.9,1.5,Iris-versicolor",
"5.5,2.3,4.0,1.3,Iris-versicolor",
"6.5,2.8,4.6,1.5,Iris-versicolor",
"5.7,2.8,4.5,1.3,Iris-versicolor",
"6.3,3.3,4.7,1.6,Iris-versicolor",
"4.9,2.4,3.3,1.0,Iris-versicolor",
"6.6,2.9,4.6,1.3,Iris-versicolor",
"5.2,2.7,3.9,1.4,Iris-versicolor",
"5.0,2.0,3.5,1.0,Iris-versicolor",
"5.9,3.0,4.2,1.5,Iris-versicolor",
"6.0,2.2,4.0,1.0,Iris-versicolor",
"6.1,2.9,4.7,1.4,Iris-versicolor",
"5.6,2.9,3.6,1.3,Iris-versicolor",
"6.7,3.1,4.4,1.4,Iris-versicolor",
"5.6,3.0,4.5,1.5,Iris-versicolor",
"5.8,2.7,4.1,1.0,Iris-versicolor",
"6.2,2.2,4.5,1.5,Iris-versicolor",
"5.6,2.5,3.9,1.1,Iris-versicolor",
"5.9,3.2,4.8,1.8,Iris-versicolor",
"6.1,2.8,4.0,1.3,Iris-versicolor",
"6.3,2.5,4.9,1.5,Iris-versicolor",
"6.1,2.8,4.7,1.2,Iris-versicolor",
"6.4,2.9,4.3,1.3,Iris-versicolor",
"6.6,3.0,4.4,1.4,Iris-versicolor",
"6.8,2.8,4.8,1.4,Iris-versicolor",
"6.7,3.0,5.0,1.7,Iris-versicolor",
"6.0,2.9,4.5,1.5,Iris-versicolor",
"5.7,2.6,3.5,1.0,Iris-versicolor",
"5.5,2.4,3.8,1.1,Iris-versicolor",
"5.5,2.4,3.7,1.0,Iris-versicolor",
"5.8,2.7,3.9,1.2,Iris-versicolor",
"6.0,2.7,5.1,1.6,Iris-versicolor",
"5.4,3.0,4.5,1.5,Iris-versicolor",
"6.0,3.4,4.5,1.6,Iris-versicolor",
"6.7,3.1,4.7,1.5,Iris-versicolor",
"6.3,2.3,4.4,1.3,Iris-versicolor",
"5.6,3.0,4.1,1.3,Iris-versicolor",
"5.5,2.5,4.0,1.3,Iris-versicolor",
"5.5,2.6,4.4,1.2,Iris-versicolor",
"6.1,3.0,4.6,1.4,Iris-versicolor",
"5.8,2.6,4.0,1.2,Iris-versicolor",
"5.0,2.3,3.3,1.0,Iris-versicolor",
"5.6,2.7,4.2,1.3,Iris-versicolor",
"5.7,3.0,4.2,1.2,Iris-versicolor",
"5.7,2.9,4.2,1.3,Iris-versicolor",
"6.2,2.9,4.3,1.3,Iris-versicolor",
"5.1,2.5,3.0,1.1,Iris-versicolor",
"5.7,2.8,4.1,1.3,Iris-versicolor",
"6.3,3.3,6.0,2.5,Iris-virginica",
"5.8,2.7,5.1,1.9,Iris-virginica",
"7.1,3.0,5.9,2.1,Iris-virginica",
"6.3,2.9,5.6,1.8,Iris-virginica",
"6.5,3.0,5.8,2.2,Iris-virginica",
"7.6,3.0,6.6,2.1,Iris-virginica",
"4.9,2.5,4.5,1.7,Iris-virginica",
"7.3,2.9,6.3,1.8,Iris-virginica",
"6.7,2.5,5.8,1.8,Iris-virginica",
"7.2,3.6,6.1,2.5,Iris-virginica",
"6.5,3.2,5.1,2.0,Iris-virginica",
"6.4,2.7,5.3,1.9,Iris-virginica",
"6.8,3.0,5.5,2.1,Iris-virginica",
"5.7,2.5,5.0,2.0,Iris-virginica",
"5.8,2.8,5.1,2.4,Iris-virginica",
"6.4,3.2,5.3,2.3,Iris-virginica",
"6.5,3.0,5.5,1.8,Iris-virginica",
"7.7,3.8,6.7,2.2,Iris-virginica",
"7.7,2.6,6.9,2.3,Iris-virginica",
"6.0,2.2,5.0,1.5,Iris-virginica",
"6.9,3.2,5.7,2.3,Iris-virginica",
"5.6,2.8,4.9,2.0,Iris-virginica",
"7.7,2.8,6.7,2.0,Iris-virginica",
"6.3,2.7,4.9,1.8,Iris-virginica",
"6.7,3.3,5.7,2.1,Iris-virginica",
"7.2,3.2,6.0,1.8,Iris-virginica",
"6.2,2.8,4.8,1.8,Iris-virginica",
"6.1,3.0,4.9,1.8,Iris-virginica",
"6.4,2.8,5.6,2.1,Iris-virginica",
"7.2,3.0,5.8,1.6,Iris-virginica",
"7.4,2.8,6.1,1.9,Iris-virginica",
"7.9,3.8,6.4,2.0,Iris-virginica",
"6.4,2.8,5.6,2.2,Iris-virginica",
"6.3,2.8,5.1,1.5,Iris-virginica",
"6.1,2.6,5.6,1.4,Iris-virginica",
"7.7,3.0,6.1,2.3,Iris-virginica",
"6.3,3.4,5.6,2.4,Iris-virginica",
"6.4,3.1,5.5,1.8,Iris-virginica",
"6.0,3.0,4.8,1.8,Iris-virginica",
"6.9,3.1,5.4,2.1,Iris-virginica",
"6.7,3.1,5.6,2.4,Iris-virginica",
"6.9,3.1,5.1,2.3,Iris-virginica",
"5.8,2.7,5.1,1.9,Iris-virginica",
"6.8,3.2,5.9,2.3,Iris-virginica",
"6.7,3.3,5.7,2.5,Iris-virginica",
"6.7,3.0,5.2,2.3,Iris-virginica",
"6.3,2.5,5.0,1.9,Iris-virginica",
"6.5,3.0,5.2,2.0,Iris-virginica",
"6.2,3.4,5.4,2.3,Iris-virginica",
"5.9,3.0,5.1,1.8,Iris-virginica"]

#output
def main():
    split = 0.67
    learn_data, test_data = load_dataset(iris, split)
    print('learn_data=' + repr(len(learn_data)))
    print('test_data=' + repr(len(test_data)))
    predict = []
    k = 3
    for x in range(len(test_data)):
        neighbors = get_neighbors(learn_data, test_data[x], k)
        result = get_response(neighbors)
        predict.append(result)
        plt.scatter(predict[x],predict[x])
        print(repr(result) + ' vs ' + repr(test_data[x][-1]))
    accuracy = get_accuracy(test_data, predict)
    print(repr(accuracy) + '%')

